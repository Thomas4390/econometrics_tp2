************************************************
*****LOAD DATA AND CREATE DATA DATES************
************************************************
cal(q) 1960:1
open data H2q2.xls
data(format=excel,org=obs) 1960:1 2019:4

compute begin   = 1960:1
compute end     = 2019:4

************************************************
*****TRANSFORM VARIABLES************************
************************************************
compute dlog_Yt = log(Yt) - log(Yt{1})
compute dlog_Ct = log(Ct) - log(Ct{1})
compute dlog_It = log(It) - log(It{1})
compute dlog_Gt = log(Gt) - log(Gt{1})


************************************************
*****CREATE VARIABLES STRINGS (TO MAKE THE CODE GENERAL)****
************************************************
compute [vector[label]] varlist   = ||"dlog_Yt","dlog_Ct","dlog_It","dlog_Gt"||
compute [vector[label]] varlabels = ||"Real GDP Growth","Real Personal Consumption Expenditure Growth","Real Gross Private Domestic Investment Growth","Real Government Consumption Expenditure Growth"||
compute nvar = %size(varlist)

* CREATE STRING FOR REGRESSORS
compute  reglist = %rlempty()
do i=1,nvar
   compute reglist = %rladdone(reglist,%s(varlist(i)))
end do
************************************************************

************************************************************
*****PLOT VARIABLES*****************************************
************************************************************
do i = 1,nvar
   set xplot = %s(varlist(i))
   graph(header=(varlabels(i)),key=lor) 1
   # xplot begin end
end do
spgraph(done)
************************************************************

************************************************************
*****SELECTING VAR LAG LENGTH*******************************
************************************************************

*1. INFORMATION CRITERIA: AIC
@VARLagSelect(crit=aic,det=constant,lags=6) begin end
# reglist

*2. INFORMATION CRITERIA: BIC
@VARLagSelect(crit=bic,det=constant,lags=6) begin end
# reglist

************************************************************
*****ESTIMATE VAR (BEST LAG) AND GRANGER-CAUSALITY TEST*****
************************************************************
compute lags = 5  // Remplacez 5 par le nombre de retards optimal sélectionné à l'aide des critères AIC ou BIC
system(model=varmodel)
variables reglist
lags 1 to lags
det constant
end(system)
estimate(outsigma=sigmat,residuals=res) begin end

* Granger causality test: dlog_Gt causing dlog_Yt
granger(dlog_Yt,dlog_Gt) lags
************************************************************


************************************************
*****PREPARE DATA FOR OUT-OF-SAMPLE FORECASTS***
************************************************
compute begin_oosf     =  2015:1
compute end_oosf       =  2019:4
compute noutsample     =  end_oosf - begin_oosf + 1

************************************************
*****OUT-OF-SAMPLE FORECASTS********************
************************************************
do i=0, noutsample-1
  compute tau_minus_1 = begin_oosf + i - 1
  compute tau = begin_oosf + i

  * Estimate VAR model using data up to tau-1
  system(model=varmodel)
  variables reglist
  lags 1 to lags
  det constant
  end(system)
  estimate(outsigma=sigmat,residuals=res,noprint) begin tau_minus_1

  * Forecast one step ahead (tau) using information up to tau-1
  forecast(model=varmodel,from=tau,steps=1,result=Y_forecast,stderrs=E_forecast,noprint)

  * Store the forecast and the forecast error variance
  copy Y_forecast(1) dlog_Y_forecast(i+1)
  copy E_forecast(1,1) var_forecast_error(i+1)

  * Store the actual value of dlog_Y at tau
    copy dlog_Yt(tau) dlog_Y_actual(i+1)
end do

************************************************
*****DISPLAY OUT-OF-SAMPLE FORECASTS************
************************************************
display "Out-of-sample forecasts:"
print /dlog_Y_forecast

display "Forecast error variances:"
print /var_forecast_error


************************************************
*****PLOT FORECASTS VS ACTUAL VALUES************
************************************************
graph(header=("dlog_Yt Forecast vs Actual"), key=lor) 2
# dlog_Y_forecast begin_oosf end_oosf
# dlog_Y_actual begin_oosf end_oosf
spgraph(done)

************************************************
*****CALCULATE MEAN SQUARED ERROR***************
************************************************
set mse = ((dlog_Y_actual - dlog_Y_forecast)^2)
compute mse_avg = @mean(mse, begin_oosf, end_oosf)

display "Mean Squared Error:"
print mse_avg

************************************************
*****ESTIMATE ARIMA(1,1,0) MODEL***************
************************************************
compute log_Yt = log(Yt)
compute begin_arima = 1960:1
compute end_arima = 2019:4

* Estimate ARIMA(1,1,0) model
arima(ar=1,d=1,ma=0) log_Yt begin_arima end_arima
estimate(outsigma=sigmat_ARIMA,residuals=res_ARIMA)

************************************************
*****FORECAST DELTA Y* FOR 2020:Q1**************
************************************************
compute begin_forecast_arima = 2020:1
compute steps_forecast_arima = 1

* Forecast one step ahead (2020:Q1) using information up to 2019:Q4
forecast(model=arima_model, from=begin_forecast_arima, steps=steps_forecast_arima, result=Y_forecast_arima, stderrs=E_forecast_arima, noprint)

* Compute delta y*
compute delta_y_star = Y_forecast_arima(1) - log_Yt(end_arima)

************************************************
*****DISPLAY DELTA Y* FORECAST*****************
************************************************
display "Delta y* forecast for 2020:Q1:"
print delta_y_star


